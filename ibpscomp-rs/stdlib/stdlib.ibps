""" ibps stdlib implemented in ibps """

null=None
none=None
true=True
false=False
output=print

sub Array(*dimensions)
    if len(dimensions) < 1 then
        return []
    end if
    if len(dimensions) == 1 then
        return [null] * dimensions[0]
    end if
    return [Array(*dimensions[1:]) for _ in range(dimensions[0])]
end sub

class Collection:

    sub __init__(SELF, *ARGS)
        SELF.INNER = list(ARGS)
        SELF.PTR = 0
    end sub

    sub isEmpty(SELF)
        return SELF.INNER == []
    end sub

    sub hasNext(SELF)
        return SELF.PTR < len(SELF.INNER)
    end sub

    sub getNext(SELF)
        if SELF.hasNext() then
            SELF.PTR += 1
            return SELF.INNER[SELF.PTR - 1]
        else
            raise StopIteration
        end if
    end sub

    sub addItem(SELF, ITEM)
        SELF.INNER.append(ITEM)
    end sub

    sub resetNext(SELF)
        SELF.PTR = 0
    end sub
        
    sub pop(SELF)
        return SELF.INNER.pop()
    end sub

    sub __repr__(SELF)
        return "Collection" + str(SELF.INNER)
    end sub

class Queue:

    sub __init__(SELF, *ARGS)
        SELF.INNER = []
        for ARG in ARGS:
            SELF.enqueue(ARG)
    end sub

    sub isEmpty(SELF)
        return SELF.INNER == []
    end sub

    sub __len__(SELF)
        return len(SELF.INNER)
    end sub

    sub enqueue(SELF, *ITEM)
        for I in ITEM:
            SELF.INNER.insert(0, I)
    end sub

    sub dequeue(SELF)
        return SELF.INNER.pop()
    end sub

    sub __repr__(SELF)
        return "Queue" + str(SELF.INNER)
    end sub

class __IBPSStackNode__:

    sub __init__(SELF, DATA)
        SELF.DATA = DATA
        SELF.NEXT = null
    end sub

class Stack:

    sub __init__(SELF, *ARGS)
        SELF.TOP = null
        SELF.push(*ARGS)
    end sub

    sub push(SELF, *ITEMS)
        for ITEM in ITEMS:
            NODE = __IBPSStackNode__(ITEM)
            if SELF.TOP is null
                SELF.TOP = NODE
            else
                NODE.NEXT = SELF.TOP
                SELF.TOP = NODE
            end if
        return ITEMS
    end sub

    sub pop(SELF)
        if SELF.TOP is null
            return null
        end if
        TEMP = SELF.TOP.DATA
        TEMP1 = SELF.TOP.NEXT
        SELF.TOP.NEXT = null
        SELF.TOP = TEMP1
        return temp
    end sub

    sub peek(SELF)
        return SELF.TOP.DATA
    end sub

    sub isEmpty(SELF)
        return SELF.TOP is null
    end sub

    sub list(SELF)
        CUR_NODE = SELF.TOP
        OUT = []
        loop while CUR_NODE is NOT null
            OUT.append(CUR_NODE.DATA)
            CUR_NODE = CUR_NODE.NEXT
        end loop
        return OUT
    end sub

    sub __repr__(SELF)
        return "Stack" + str(SELF.list())
    end sub
